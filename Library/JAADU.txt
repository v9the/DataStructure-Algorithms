/*
 *						MY LIBRARY 
 */




/*	EUCLID GCD
 */	O(log(b) with base 2)

	ll euclid_gcd(ll a, ll b) {
		return b == 0 ? a : euclid_gcd(b, a % b);
	}




/*	FAST EXPONENTIATION
 */	O(log(exp) with base 2)

	inline ll fast_exp(ll base, ll exp) {
	ll res = 1;
	while (exp > 0) {
		if (exp % 2 == 1) res = (res*base) % MOD;
		base = (base*base) % MOD;
		exp /= 2;
	}
	return res % MOD;
}




/*	SUM OF SUBARRAYS
 */	O(n)

	inline ll subarray_sum( int arr[] , int n ) {
    	ll result = 0;
    	rep(i, n)
        	result += (arr[i] * (i+1) * (n-i));
    	return result;
	}




/*	EFFICIENT WAY OF FINDING PRIMES
 */	O(n*log(log(n)))

	inline void sieveof_eratosthenes(int n) {
		bool* prime = new bool[n + 1];
		memset(prime, true, sizeof(bool));
		prime[0] = prime[1] = false;
		repA(i, 2, sqrt(n)) {
			if (prime[i]) {
				for (int j = 2; i * j <= n; j++) {
					prime[i * j] = false;
				}
			}
		}
		repA(i, 2, n) {
			if (prime[i]) {
				cout << i << ' ';
			}
		}
		delete[] prime;
	}




/*	DIVISORS
 */	O(sqrt(n))

	inline void print_divisors(int n) {
		vector<int> fact;
		repA(i, 1, sqrt(n)) {
			if (n % i == 0) {
				fact.push_back(i);
				if (n / i != i) {
					fact.push_back(n / i);
				}
			}
		}	//O(sqrt(n))
		sort(fact.begin(), fact.end());	//O(nlog(n))
		rep(i, (int) fact.size()) {
			cout << fact[i] << ' ';
		}	//O(fact.size())
	}

// if sqrt(num) * sqrt(num) == n then factor of num are odd else vice-versa.


/*	PRIME FACTORIZATION
 */	O(sqrt(n))

	inline void prime_factorization(int n) {
		repA(i, 2, sqrt(n)) {
			if (n % i == 0) {
				int cnt = 0;
				while (n % i == 0) {
					n /= i;
					cnt++;
				}
				cout << i << '^' << cnt << ", ";
			}
		}
		if (n != 1) {
			cout << n << "^1";
		}
	}




/*	AREA OF POLYGON
 */	O(n), where n = number of vertex

	class Point {
	public:
		double x, y;
	};

	double cross_product(Point a, Point b) {
		return a.x * b.y - b.x * a.y;
	}

	double area(Point vertex[], int n) {
		double sum = 0.0;
		rep(i, n) {
			sum += cross_product(vertex[i], vertex[(i + 1) % n]);
		}
		return abs(sum) / 2.0;
	}




/*	DIRECTION OF A POINT 'P' FROM A LINE SEGMENT 'AB'
 */	O(1)

	class Point {
	public:
		double x, y;
	};

	int LEFT = -1, RIGHT = 1, ON_THE_LINE = 0;

	double get_cross_product(Point a, Point b) {
		return a.x * b.y - b.x * a.y;
	}

	Point subtract(Point a, Point b) {
		Point result;
		result.x = b.x - a.x;
		result.y = b.y - a.y;
		return result;
	}

	int get_direction(Point a, Point b, Point p) {
		b = subtract(a, b);
		p = subtract(a, p);
		double cross_product = get_cross_product(b, p);
		if (cross_product > 0) {
			return LEFT;
		}
		else
			if (cross_product < 0) {
				return RIGHT;
			}
			else {
				return ON_THE_LINE;
			}
	}




/*	Fast STDIN
 */	O(1)

	inline int read() {
		int x = 0, f = 1;
		char c = getchar();
		while (c<'0' || c>'9') {
			if (c == '-') f = -1; c = getchar();
		}
		while (c >= '0'&&c <= '9') { x = (x << 3) + (x << 1) + c - '0'; c = getchar(); }
		return x * f;
	}




/*	Fibonacci Nth Number
 */	O(log(n))

	ll a, b, c, d;
	ll ans[2] = { 0,0 };
	void fast_fib(ll n) {
		if (n == 0) {
			ans[0] = 0;
			ans[1] = 1;
			return;
		}
		fast_fib((n / 2));
		a = ans[0];	//F(n)
		b = ans[1];	//F(n+1)
		c = 2 * b - a;
		if (c < 0)
			c += MOD;
		c = (a * c) % MOD;	//F(2n)
		d = (a*a + b * b) % MOD;	//F(2n + 1)
		if (n % 2 == 0) {
			ans[0] = c;
			ans[1] = d;
		}
		else {
			ans[0] = d;
			ans[1] = c + d;
		}
	}	// ans[0] is the nth fibonacci number





// fast mod


ll fast_mod(const ll input, const ll ceil) {
	return input >= ceil ? input % ceil : input;
}

ll mod(const string num, const ll a) {
	ll res = 0;
	rep(i, h(num))
		res = fast_mod(res * 10 + (ll)num[i] - '0', a);
	return res;
}




// check parity

bool findParity(int x) {
	int y = x ^ (x >> 1);
	y = y ^ (y >> 2);
	y = y ^ (y >> 4);
	y = y ^ (y >> 8);
	y = y ^ (y >> 16);
	if (y & 1)
		return 1;
	return 0;
}




// count set bits in number

int num_to_bits[16] = { 0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4 };
 
unsigned int countSetBitsRec(unsigned int num) {
		int nibble = 0;
		if (0 == num)
			return num_to_bits[0];
		nibble = num & 0xf;
		return num_to_bits[nibble] + countSetBitsRec(num >> 4);
} 





// reading


int readInt(){
    int x=0;
    bool sign=false;
    char c=getchar();
    while(!isdigit(c)){
        sign=c=='-';
        c=getchar();
    }
    while(isdigit(c)){
        x=x*10+c-'0';
        c=getchar();
    }
    return sign?-x:x;
}
ll readLong(){
    ll x=0;
    bool sign=false;
    char c=getchar();
    while(!isdigit(c)){
        sign=c=='-';
        c=getchar();
    }
    while(isdigit(c)){
        x=x*10+c-'0';
        c=getchar();
    }
    return sign?-x:x;
}
string readString(){
    string s;
    char c=getchar();
    while(isspace(c)){
        c=getchar();
    }
    while(!isspace(c)){
        s+=c;
        c=getchar();
    }
    return s;
}






// 2 ^ n == (1 << n)
// num & (1 << pos) [check isSet at pos]



ll nCr(ll n, ll k) {
	if(k == 0)
		return 1;
	ll res = 1;
	if (k > n - k)
		k = n - k;
	for (ll i = 0; i < k; ++i) {
		res *= (n - i);
		res /= (i + 1);
	}
	return res;
}



// Pascal Triangle // also used for nCr
	//suppose n = 10, r = 5
	a[1][1] = 1;
	a[1][0] = 1;

	for (int i = 2; i <= 100; i++) { // till 100Cr
		a[i][0] = 1;
		for (int j = 1; j <= i; j++) {
			a[i][j] = a[i - 1][j] + a[i - 1][j - 1];
		}
	}
	//ans will be cout << a[n][r];