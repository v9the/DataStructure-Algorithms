/*
 *						MY LIBRARY 
 */




/*	EUCLID GCD
 */	O(log(b) with base 2)

	ll euclid_gcd(ll a, ll b) {
		return b == 0 ? a : euclid_gcd(b, a % b);
	}




/*	FAST EXPONENTIATION
 */	O(log(exp) with base 2)

	inline ll fast_exp(ll base, ll exp, ll MOD) {
	ll res = 1;
	while (exp > 0) {
		if (exp & 1)
			res = (res*base) % MOD;
		base = (base*base) % MOD;
		exp >>= 1;
	}
	return res;
}




/*	SUM OF SUBARRAYS
 */	O(n)

	inline ll subarray_sum( int arr[] , int n ) {
    	ll result = 0;
    	rep(i, n)
        	result += (arr[i] * (i+1) * (n-i));
    	return result;
	}




/*	EFFICIENT WAY OF FINDING PRIMES
 */	O(n*log(log(n)))

	inline void sieveof_eratosthenes(int n) {
		bool* prime = new bool[n + 1];
		memset(prime, true, sizeof(bool));
		prime[0] = prime[1] = false;
		repA(i, 2, sqrt(n)) {
			if (prime[i]) {
				for (int j = 2; i * j <= n; j++) {
					prime[i * j] = false;
				}
			}
		}
		repA(i, 2, n) {
			if (prime[i]) {
				cout << i << ' ';
			}
		}
		delete[] prime;
	}




/*	DIVISORS
 */	O(sqrt(n))

	inline void print_divisors(int n) {
		vector<int> fact;
		repA(i, 1, sqrt(n)) {
			if (n % i == 0) {
				fact.push_back(i);
				if (n / i != i) {
					fact.push_back(n / i);
				}
			}
		}	//O(sqrt(n))
		sort(fact.begin(), fact.end());	//O(nlog(n))
		rep(i, (int) fact.size()) {
			cout << fact[i] << ' ';
		}	//O(fact.size())
	}

// if sqrt(num) * sqrt(num) == n then factor of num are odd else vice-versa.


/*	PRIME FACTORIZATION
 */	O(sqrt(n))

	inline void prime_factorization(int n) {
		repA(i, 2, sqrt(n)) {
			if (n % i == 0) {
				int cnt = 0;
				while (n % i == 0) {
					n /= i;
					cnt++;
				}
				cout << i << '^' << cnt << ", ";
			}
		}
		if (n != 1) {
			cout << n << "^1";
		}
	}




/*	AREA OF POLYGON
 */	O(n), where n = number of vertex

	class Point {
	public:
		double x, y;
	};

	double cross_product(Point a, Point b) {
		return a.x * b.y - b.x * a.y;
	}

	double area(Point vertex[], int n) {
		double sum = 0.0;
		rep(i, n) {
			sum += cross_product(vertex[i], vertex[(i + 1) % n]);
		}
		return abs(sum) / 2.0;
	}




/*	DIRECTION OF A POINT 'P' FROM A LINE SEGMENT 'AB'
 */	O(1)

	class Point {
	public:
		double x, y;
	};

	int LEFT = -1, RIGHT = 1, ON_THE_LINE = 0;

	double get_cross_product(Point a, Point b) {
		return a.x * b.y - b.x * a.y;
	}

	Point subtract(Point a, Point b) {
		Point result;
		result.x = b.x - a.x;
		result.y = b.y - a.y;
		return result;
	}

	int get_direction(Point a, Point b, Point p) {
		b = subtract(a, b);
		p = subtract(a, p);
		double cross_product = get_cross_product(b, p);
		if (cross_product > 0) {
			return LEFT;
		}
		else
			if (cross_product < 0) {
				return RIGHT;
			}
			else {
				return ON_THE_LINE;
			}
	}


/* ld chk = a * x1 + b * y1 + c;
check sign of chk to know where is the point(x1,y1) on
line(not line segment) ax+by+c=0 
*/

/*	Fast STDIN
 */	O(1)

	inline int read() {
		int x = 0, f = 1;
		char c = getchar();
		while (c<'0' || c>'9') {
			if (c == '-') f = -1; c = getchar();
		}
		while (c >= '0'&&c <= '9') { x = (x << 3) + (x << 1) + c - '0'; c = getchar(); }
		return x * f;
	}




/*	Fibonacci Nth Number
 */	O(log(n))

	ll a, b, c, d;
	ll ans[2] = { 0,0 };
	void fast_fib(ll n) {
		if (n == 0) {
			ans[0] = 0;
			ans[1] = 1;
			return;
		}
		fast_fib((n / 2));
		a = ans[0];	//F(n)
		b = ans[1];	//F(n+1)
		c = 2 * b - a;
		if (c < 0)
			c += MOD;
		c = (a * c) % MOD;	//F(2n)
		d = (a*a + b * b) % MOD;	//F(2n + 1)
		if (n % 2 == 0) {
			ans[0] = c;
			ans[1] = d;
		}
		else {
			ans[0] = d;
			ans[1] = c + d;
		}
	}	// ans[0] is the nth fibonacci number





// fast mod


ll fast_mod(const ll input, const ll ceil) {
	return input >= ceil ? input % ceil : input;
}

ll mod(const string num, const ll a) {
	ll res = 0;
	rep(i, h(num))
		res = fast_mod(res * 10 + (ll)num[i] - '0', a);
	return res;
}

//more fast MOD operation


inline void fasterLLDivMod(unsigned long long x, unsigned y, unsigned &out_d, unsigned &out_m) {
    unsigned xh = (unsigned)(x >> 32), xl = (unsigned)x, d, m;
    #ifdef __GNUC__
    asm(
        "divl %4 \n\t"
        : "=a" (d), "=d" (m)
        : "d" (xh), "a" (xl), "r" (y)
    );
    #else
    __asm {
        mov edx, dword ptr[xh];
        mov eax, dword ptr[xl];
        div dword ptr[y];
        mov dword ptr[d], eax;
        mov dword ptr[m], edx;
    };
    #endif
    out_d = d; out_m = m;
}
inline unsigned mod(unsigned long long x, unsigned y) {
    unsigned dummy, r;
    fasterLLDivMod(x, y, dummy, r);
    return r;
}



// 2 ^ n == (1 << n)
// num & (1 << pos) [check isSet at pos]



ll nCr(ll n, ll k) {
	if(k == 0)
		return 1;
	ll res = 1;
	if (k > n - k)
		k = n - k;
	for (ll i = 0; i < k; ++i) {
		res *= (n - i);
		res /= (i + 1);
	}
	return res;
}



// Pascal Triangle // also used for nCr
	//suppose n = 10, r = 5
	a[1][1] = 1;
	a[1][0] = 1;

	for (int i = 2; i <= 100; i++) { // till 100Cr
		a[i][0] = 1;
		for (int j = 1; j <= i; j++) {
			a[i][j] = a[i - 1][j] + a[i - 1][j - 1];
		}
	}
	//ans will be cout << a[n][r];



More:



1>


#include <bits/stdc++.h>
using namespace std;

int extended_euclid_gcd(int a, int b, int &x, int &y) {
	if(b == 0) {
		x=1;
		y=0;
		return a;
	}
	int x2, y2, tmp;
	tmp = extended_euclid_gcd(b, a%b, x2, y2);
	x=y2;
	y=x2-y2*(a/b);
	return tmp;
}

int main() {
	int a=16, b=10, x, y;
	int gcd = extended_euclid_gcd(a,b,x,y);
	cout << "GCD: " << gcd << endl;
	cout << "x: " << x << ", y: " << y;
}
// we can also use above algorithm to find multiplicative modulo invere in eqn(A*B mod M = 1) which is B
// as we can pass like.. extended_euclid_gcd(A,M,x,y) where x will be B


2>

how to find number of divisors of n!
ans--
we have to simulate n! into p(1) ^ a * p(2) ^ b ... p(n) ^ k 
where p(i)^a canbe found by eg-- 2^2,3^2,5^5 etc by n/p(i)^(idx) ie(supposewe have to find for prime 2
then first n/2---save its cnt, then n/4..n/6.....till n/k != 0
cnt--n/2
cnt2--n/4
cnt3--n/16
.
.
cntk--n/k

so 2 ^ (cnt+cnt2+...cntk)
similarly for another primes thenwe can find p(1) ^ a * p(2) ^ b ... p(n) ^ k 
)  
so answer will be cout << (a+1) * (b+1) * ... (k+1)



3>


fibonacci sum problem:
S(n)=f(n+2) - 1


4>


fermet little thrm:
(a ^ p) % p = a or (a ^ p) congruent to (a mod p) where p is prime

so divide by a^2 , we get

(a ^ (p - 2)) % p = (a ^ (-1)) % p
it can also be used in multiplicative modulo invere if p is prime


5>

Wilson thrm:

( (p-1)! ) % p = -1 or p - 1 where p is prime


6>


Euler totient fn:
it is the phi(n) where answer will be cnt of numbers whose gcd is 1 with n ie, gcd(n,m) = 1

so, formula is: phi(n) = n*(1-1/p1)*(1-1/p2)....*(1-1/pk) , where p1,p2..pk is prime factors of n

Property: 

phi(a*b) = phi(a)*phi(b) only when gcd(a,b) = 1

phi(p^m) = p ^ m - p ^ (m-1) , where p is prime

phi(p) = p-1 , where p is prime

sum of phi(factor1 of n) + phi(factor2 of n)...+ phi(factork of n) = n

most imp pro. is: a^phi(p) = 1(mod p) (eqn is congruent)
