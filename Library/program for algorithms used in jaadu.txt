#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

//sieve mthd for euler phi func
void euler_phi(int n) {
	int phi[n + 1];
	for (int i = 1; i <= n; i++) {
		phi[i] = i;
	}
	for (int i = 2; i <= n; i++) {
		if (phi[i] == i) {
			phi[i]--;
			for (int j = 2 * i; j <= n; j += i) {
				phi[j] = (phi[j] * (i - 1)) / i;
			}
		}
	}
	for (int i = 1; i <= n; i++) {
		cout << "phi(" << i << ") : " << phi[i] << endl;
	}
}

//euler phi func
int euler_phi_for_single_n(int n) {
	int res = n;
	for (int i = 2; i * i <= n; i++) {
		if (n % i == 0) {
			while (n % i == 0)
				n /= i;
			res -= res / i;
		}
	}
	if (n > 1)
		res -= res / n;
	return res;
}

//sieve of eratosthenes

const int MAX = 1e8;
bool is_prime[MAX + 1];
vector<ll> primes;

void sieve_of_eratosthenes() {
	memset(is_prime, 1, sizeof is_prime);
	is_prime[0] = is_prime[1] = 0;
	for (int i = 2; i * i <= MAX; i++) {
		if (is_prime[i]) {
			for (int j = i * i; j < MAX; j += i) {
				is_prime[j] = 0;
			}
		}
	}
	for (int i = 2; i <= MAX; i++) {
		if (is_prime[i])
			primes.push_back(i);
	}
}

//segmented sieve

vector<int> segmented_primes;

void sieve_segmented(int l, int r) {
	memset(is_prime, 1, sizeof is_prime);
	for (int i = 0; primes[i]*primes[i] <= r; i++) {
		int start = l - (l % primes[i]);
		//or i can do below
		//int start = (l / primes[i]) * primes[i];
		if (start < l)
			start += primes[i];
		for (int j = start; j <= r; j += primes[i]) {
			is_prime[j - l] = 0;
		}
		if (start == primes[i])
			is_prime[start - l] = 1;
	}
	if (l == 1)
		is_prime[0] = 0;
	for (int i = 0; i <= r - l; i++) {
		if (is_prime[i]) {
			segmented_primes.push_back(i + l);
		}
	}
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);
#endif
	// cout << "for sieve mtd:\n";
	// euler_phi(10);// sieve mtd O(nloglog(n))
	// cout << endl;
	// cout << "for single value in O(sqrt(val))\n";
	// cout << euler_phi_for_single_n(9); // O(sqrt(n))
	sieve_of_eratosthenes();
	sieve_segmented(1, 5);
	for (auto a : segmented_primes) {
		cout << a << ' ';
	}
}